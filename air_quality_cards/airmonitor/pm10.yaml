# 에어모니터 플러스 - PM10 센서 카드
# 색상: 파란색 (#2196F3)

type: custom:button-card
entity: sensor.eeomoniteo_peulreoseu_pm10
name: 에어모니터 플러스 PM10
icon: mdi:air-purifier
variables:
  symbol: " μg/m³"
  state_data: |
    [[[
      const state = entity.state;
      const levels = ["나쁨", "보통", "좋음"];
      const colors = ["#FF6B6B", "#FFA500", "#2196F3"];
      const thresholds = [100, 50, 0];
      let data = {
        value: state || 'N/A',
        level: 'Unknown',
        color: 'var(--disabled-text-color)',
        percentage: 0
      };

      if (state === undefined || state === null || state === 'unavailable' || state === 'unknown' || isNaN(state)) {
        return data;
      }

      const value = parseFloat(state);
      data.value = value;

      const index = thresholds.findIndex(threshold => value >= threshold);

      if (index !== -1) {
        data.level = levels[index];
        data.color = colors[index];
      } else {
         data.level = levels[levels.length - 1];
         data.color = colors[colors.length - 1];
      }

      const min_value = 0;
      const max_value = 200;
      let percentage = ((value - min_value) / (max_value - min_value)) * 100;
      if (isNaN(percentage)) {
        percentage = 0;
      }
      data.percentage = Math.max(0, Math.min(100, percentage));

      return data;
    ]]]
label: |
  [[[
    const data = variables.state_data;
    const displayValue = typeof data.value === 'number' ? data.value.toFixed(1) : variables.entity_state;
    if (data.level === 'Unknown') return 'N/A';
    return displayValue + '<span style="font-size:14px;line-height:1px">' + variables.symbol + '</span>';
  ]]]
show_icon: true
show_label: true
styles:
  card:
    - padding: 0
    - height: 160px
  grid:
    - grid-template-areas: "\"i i\" \"l state\" \"n n\" \"bar bar\""
  label:
    - justify-self: start
    - font-size: 2em
    - line-height: 1.5em
    - font-weight: 300
    - color: var(--gray1000)
    - padding-left: 20px
  name:
    - justify-self: start
    - font-size: 14px
    - color: var(--gray1000)
    - opacity: "0.7"
    - padding-left: 20px
    - line-height: 17px
  img_cell:
    - justify-self: end
    - align-self: start
    - background: "#9E9E9E"
    - padding: 14px
    - border-radius: 50%
    - margin: 4px 4px 0 0
    - width: 30px
    - height: 30px
  icon:
    - width: 30px
    - height: 30px
    - color: var(--gray1000)
  custom_fields:
    state:
      - justify-self: end
      - align-self: end
      - font-size: 14px
      - color: var(--gray1000)
      - opacity: "0.7"
      - padding-right: 20px
      - padding-bottom: 9px
    bar:
      - justify-self: start
      - width: 100%
      - background-image: |
          [[[
            const color = variables.state_data.color || 'transparent';
            return `repeating-linear-gradient(45deg,transparent,transparent 2px,${color} 3px,transparent 4px)`;
          ]]]
      - height: 30px
      - margin-top: 6px
custom_fields:
  state: |
    [[[
      return variables.state_data.level;
    ]]]
  bar: |
    [[[
      const color = variables.state_data.color || 'transparent';
      const width = variables.state_data.percentage;
      return `<div> <div style="background:${color}; height:30px; width:${width}%; "></div></div>`
    ]]]
