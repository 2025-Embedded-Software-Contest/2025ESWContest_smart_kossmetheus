---
# 가스 검침기 OCR 자동화 예시
# 이 파일을 Home Assistant의 automations.yaml에 추가하거나 별도 파일로 저장하세요

automation:
  # 기본 가스 검침 자동화 (30분마다 실행)
  - alias: "가스 검침기 OCR - 정시 실행"
    description: "30분마다 가스 검침기 사진을 촬영하고 OCR 처리합니다"
    trigger:
      - platform: time_pattern
        minutes: "/30"
        seconds: 0
    condition:
      # 특정 시간대에만 실행 (예: 오전 8시 ~ 오후 8시)
      - condition: time
        after: "08:00:00"
        before: "20:00:00"
    action:
      # 1단계: ESP32-CAM으로 사진 촬영
      - service: esphome.esp32_cam_capture
        data:
          file_path: "/config/www/gas_latest.jpg"

      # 2단계: 잠시 대기 (파일 저장 시간)
      - delay: "00:00:05"

      # 3단계: 자동 크롭 처리
      - service: pyscript.gas_meter_crop
        data:
          input_image: "/config/www/gas_latest.jpg"
          output_image: "/config/www/gas_cropped.jpg"
          rotation_angle_before: 0  # 필요시 회전 각도 조정
          rotation_angle: 0

      # 4단계: OCR 처리 (별도 OCR 통합모듈이 설치되어 있어야 함)
      - service: ocr.perform_ocr
        data:
          image_path: "/config/www/gas_cropped.jpg"
          language: "kor+eng"
        response_variable: ocr_result

      # 5단계: OCR 결과 처리
      - service: pyscript.process_gas_ocr_result
        data:
          ocr_text: "{{ ocr_result.text }}"
          confidence: "{{ ocr_result.confidence }}"

  # 파일 변경 감지 자동화 (ESP32-CAM 촬영 후 즉시 처리)
  - alias: "가스 검침기 OCR - 파일 변경 감지"
    description: "새로운 가스 검침기 사진이 촬영되면 즉시 OCR 처리합니다"
    trigger:
      - platform: file
        files:
          - "/config/www/gas_latest.jpg"
        initial: true
    condition:
      # 최근 5분 이내에 촬영된 파일만 처리
      - condition: template
        value_template: >
          {{ (as_timestamp(now()) - as_timestamp(states.sensor.file_last_modified_gas_latest.last_changed)) < 300 }}
    action:
      # 자동 크롭 처리
      - service: pyscript.gas_meter_crop
        data:
          input_image: "/config/www/gas_latest.jpg"
          output_image: "/config/www/gas_ready_for_ocr.jpg"

      # OCR 처리
      - service: ocr.perform_ocr
        data:
          image_path: "/config/www/gas_ready_for_ocr.jpg"
          language: "kor+eng"
        response_variable: ocr_result

      # 결과 저장
      - service: input_text.set_value
        data:
          entity_id: input_text.gas_meter_reading
          value: "{{ ocr_result.text }}"

  # 수동 OCR 실행 버튼
  - alias: "가스 검침기 OCR - 수동 실행"
    description: "사용자가 수동으로 가스 검침기 OCR을 실행할 수 있는 버튼"
    trigger:
      - platform: state
        entity_id: input_button.gas_meter_ocr_manual
    action:
      # 최신 이미지로 OCR 처리
      - service: pyscript.gas_meter_crop
        data:
          input_image: "/config/www/gas_latest.jpg"
          output_image: "/config/www/gas_manual_cropped.jpg"

      # OCR 처리
      - service: ocr.perform_ocr
        data:
          image_path: "/config/www/gas_manual_cropped.jpg"
          language: "kor+eng"
        response_variable: ocr_result

      # 결과 알림
      - service: notify.mobile_app_smartphone
        data:
          title: "가스 검침 결과"
          message: >
            인식된 숫자: {{ ocr_result.text }}
            신뢰도: {{ ocr_result.confidence }}%

# 필요한 헬퍼 엔티티들 (configuration.yaml에 추가 필요)
input_text:
  gas_meter_reading:
    name: "가스 검침기 수치"
    initial: "대기중..."

input_button:
  gas_meter_ocr_manual:
    name: "가스 검침 OCR 수동 실행"
    icon: mdi:gas-cylinder

# 센서 (파일 수정 시간 추적용)
sensor:
  - platform: file
    file_path: "/config/www/gas_latest.jpg"
    name: "가스 검침기 이미지 수정시간"
    id: file_last_modified_gas_latest
