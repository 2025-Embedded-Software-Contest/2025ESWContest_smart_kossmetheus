- id: high_power_consumption_alert
  alias: 높은 전력 소비 알림
  description: 총 전력 소비가 임계값을 초과했을 때 알림
  triggers:
  - trigger: numeric_state
    entity_id: sensor.total_power_consumption
    above: 500
    for: 00:05:00
  conditions:
  - condition: state
    entity_id: binary_sensor.someone_home
    state: 'on'
  actions:
  - action: persistent_notification.create
    data:
      title: ⚡ 전력 소비 주의
      message: '현재 전력 소비량이 {{ states(''sensor.total_power_consumption'') }}W입니다. 에너지
        절약을 위해 불필요한 기기를 확인해보세요.

        '
      notification_id: high_power_alert
- id: energy_saving_mode
  alias: 에너지 절약 모드
  description: 집에 아무도 없을 때 에너지 절약
  triggers:
  - trigger: state
    entity_id: binary_sensor.someone_home
    from: 'on'
    to: 'off'
    for: 00:30:00
  actions:
  - action: light.turn_off
    target:
      entity_id:
      - light.zigbee_dimmer
      - light.smart_bulb
  - action: persistent_notification.create
    data:
      title: "\U0001F3E0 에너지 절약 모드 활성화"
      message: 부재 중이므로 조명을 자동으로 꺼두었습니다.
- id: low_battery_device_alert
  alias: 저배터리 디바이스 알림
  triggers:
  - trigger: state
    entity_id: binary_sensor.low_battery_devices
    from: 'off'
    to: 'on'
  actions:
  - action: persistent_notification.create
    data:
      title: "\U0001F50B 배터리 부족 주의"
      message: "배터리가 부족한 디바이스가 있습니다: {% set devices = [\n  ('Apple Watch', states('sensor.gimuhyeonyi_apple_watch_battery')),\n
        \ ('MacBook Pro', states('sensor.gimuhyeonyi_macbook_pro_battery')),\n  ('iPad
        Pro', states('sensor.uhyeonyi_ipad_pro_battery')),\n  ('iPhone XS', states('sensor.uhyeonyi_iphone_xs_battery'))\n]
        %} {% for device, battery in devices %} {% if battery|int < 20 %} - {{ device
        }}: {{ battery }}% {% endif %} {% endfor %}\n"
      notification_id: low_battery_alert
- id: critical_battery_alert
  alias: 극저배터리 알림
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.gimuhyeonyi_apple_watch_battery
    - sensor.gimuhyeonyi_macbook_pro_battery
    - sensor.uhyeonyi_ipad_pro_battery
    - sensor.uhyeonyi_iphone_xs_battery
    below: 10
  actions:
  - action: persistent_notification.create
    data:
      title: "\U0001F6A8 배터리 위험 수준"
      message: '{{ trigger.to_state.attributes.friendly_name }}의 배터리가 {{ trigger.to_state.state
        }}%입니다. 즉시 충전하세요!

        '
      notification_id: critical_battery_{{ trigger.entity_id.split('.')[1] }}
- id: evening_brushing_reminder
  alias: 저녁 양치 알림
  triggers:
  - trigger: time
    at: '22:00:00'
  conditions:
  - condition: state
    entity_id: binary_sensor.someone_home
    state: 'on'
  - condition: template
    value_template: '{{ (now() - states.sensor.smart_series_7000_6f50.last_changed).total_seconds()
      > 7200 }}

      '
  actions:
  - action: persistent_notification.create
    data:
      title: "\U0001FAA5 양치 알림"
      message: 최근 2시간 동안 양치 기록이 없습니다.
      notification_id: brushing_reminder
- id: high_heart_rate_alert
  alias: 심박수 경고
  triggers:
  - trigger: numeric_state
    entity_id: sensor.ble_heart_rate_e0e33e6221b5
    above: 120
    for: 00:01:00
  actions:
  - action: persistent_notification.create
    data:
      title: ❤️ 심박수 경고
      message: 심박수가 120bpm 이상으로 상승했습니다. 상태를 확인하세요.
      notification_id: heart_rate_alert
- id: daily_steps_goal_achievement
  alias: 일일 걸음수 목표 달성
  triggers:
  - trigger: numeric_state
    entity_id: sensor.ble_steps_e0e33e6221b5
    above: 10000
  conditions:
  - condition: template
    value_template: '{{ (now().date() - states.sensor.ble_steps_e0e33e6221b5.last_changed.date()).days
      == 0 }}

      '
  actions:
  - action: persistent_notification.create
    data:
      title: "\U0001F389 걸음수 목표 달성!"
      message: "축하합니다! 오늘 {{ states('sensor.ble_steps_e0e33e6221b5') }}보를 걸으셨네요. 건강한
        하루를 보내고 계시는군요! \U0001F44F\n"
      notification_id: steps_goal_achieved
- id: dishwasher_cycle_complete
  alias: 식기세척기 완료 알림
  triggers:
  - trigger: state
    entity_id: sensor.jubang_siggiseceoggi_remaining_time
    to: '0'
  conditions:
  - condition: state
    entity_id: binary_sensor.someone_home
    state: 'on'
  actions:
  - action: persistent_notification.create
    data:
      title: "\U0001F37D️ 식기세척기 완료"
      message: '식기세척기 세척이 완료되었습니다!  식기를 꺼내주세요. 총 세척 시간: {{ states(''sensor.jubang_siggiseceoggi_total_time'')
        }}

        '
      notification_id: dishwasher_complete
- id: rinse_aid_refill_reminder
  alias: 린스 보충 알림
  triggers:
  - trigger: state
    entity_id: binary_sensor.jubang_siggiseceoggi_rinse_refill_needed
    from: 'off'
    to: 'on'
  actions:
  - action: persistent_notification.create
    data:
      title: "\U0001F9F4 린스 보충 필요"
      message: '식기세척기 린스 보충이 필요합니다.  현재 잔여량: {{ states(''sensor.jubang_siggiseceoggi_rinse_aid_dispenser_level'')
        }}

        '
      notification_id: rinse_aid_reminder
- id: humidity_management_alert
  alias: 습도 관리 알림
  triggers:
  - trigger: numeric_state
    entity_id: sensor.seutaendeuhyeong_eeokeon_humidity
    above: 70
    for: 00:30:00
  - trigger: numeric_state
    entity_id: sensor.seutaendeuhyeong_eeokeon_humidity
    below: 30
    for: 00:30:00
  actions:
  - action: persistent_notification.create
    data:
      title: "\U0001F4A7 습도 관리 필요"
      message: "현재 습도가 {{ states('sensor.seutaendeuhyeong_eeokeon_humidity') }}%입니다.
        {% if trigger.platform == 'numeric_state' and trigger.above is not none %}\n
        \ 습도가 높습니다. 제습을 고려해보세요.\n{% else %}\n  습도가 낮습니다. 가습을 고려해보세요.\n{% endif %}\n"
      notification_id: humidity_alert
- id: sunrise_gradual_lighting
  alias: 일출 조명 서서히 켜기
  triggers:
  - trigger: sun
    event: sunrise
    offset: -00:30:00
  conditions:
  - condition: state
    entity_id: binary_sensor.someone_home
    state: 'on'
  - condition: state
    entity_id: binary_sensor.workday_sensor
    state: 'on'
  actions:
  - action: light.turn_on
    target:
      entity_id: light.zigbee_dimmer
    data:
      brightness_pct: 10
      transition: 300
  - delay: 00:15:00
  - action: light.turn_on
    target:
      entity_id: light.zigbee_dimmer
    data:
      brightness_pct: 50
      transition: 900
- id: sunset_auto_lighting
  alias: 일몰 후 자동 조명
  triggers:
  - trigger: sun
    event: sunset
    offset: 00:30:00
  conditions:
  - condition: state
    entity_id: binary_sensor.someone_home
    state: 'on'
  actions:
  - action: light.turn_on
    target:
      entity_id:
      - light.zigbee_dimmer
      - light.smart_bulb
    data:
      brightness_pct: 80
      color_temp_kelvin: 2500
- id: bedtime_lights_off
  alias: 취침 시간 조명 끄기
  triggers:
  - trigger: time
    at: '23:30:00'
  conditions:
  - condition: state
    entity_id: binary_sensor.someone_home
    state: 'on'
  actions:
  - action: light.turn_on
    target:
      entity_id:
      - light.zigbee_dimmer
      - light.smart_bulb
    data:
      brightness_pct: 20
      transition: 300
  - delay: 00:05:00
  - action: light.turn_off
    target:
      entity_id:
      - light.zigbee_dimmer
      - light.smart_bulb
  - action: persistent_notification.create
    data:
      title: "\U0001F319 좋은 꿈 되세요"
      message: 취침 시간이라 조명을 껐습니다. 좋은 밤 보내세요!
      notification_id: bedtime_lights
- id: workday_morning_briefing
  alias: 근무일 아침 브리핑
  triggers:
  - trigger: time
    at: 07:30:00
  conditions:
  - condition: state
    entity_id: binary_sensor.workday_sensor
    state: 'on'
  - condition: state
    entity_id: binary_sensor.someone_home
    state: 'on'
  actions:
  - action: persistent_notification.create
    data:
      title: ☀️ 좋은 아침입니다!
      message: "오늘의 정보를 확인해보세요:\n\U0001F4C5 {{ states('sensor.date') }} \U0001F321️
        실내 온도: {{ states('sensor.seutaendeuhyeong_eeokeon_temperature') }}°C \U0001F4A7
        실내 습도: {{ states('sensor.seutaendeuhyeong_eeokeon_humidity') }}% ⚡ 현재 전력:
        {{ states('sensor.total_power_consumption') }}W \U0001F50B 평균 배터리: {{ states('sensor.average_device_battery')
        }}%\n좋은 하루 되세요! \U0001F4AA\n"
      notification_id: morning_briefing
- id: weekend_sleep_mode
  alias: 주말 늦잠 모드
  triggers:
  - trigger: sun
    event: sunrise
    offset: 02:00:00
  conditions:
  - condition: state
    entity_id: binary_sensor.workday_sensor
    state: 'off'
  - condition: state
    entity_id: binary_sensor.someone_home
    state: 'on'
  actions:
  - action: light.turn_on
    target:
      entity_id: light.zigbee_dimmer
    data:
      brightness_pct: 30
      transition: 600
  - action: persistent_notification.create
    data:
      title: "\U0001F634 주말 모드"
      message: 주말이니까 천천히 일어나세요. 조명을 부드럽게 켰습니다.
      notification_id: weekend_mode
- id: gas_send_monthly_telegram
  alias: 가스 검침 사진 보내기
  description: ''
  triggers:
  - at: 09:03:00
    trigger: time
  conditions:
  - condition: template
    value_template: '{{now().day == 26}}'
  actions:
  - variables:
      nowdate: '{{ now().strftime(''%Y-%m-%d'') }}'
      nowtime: '{{ now().strftime(''%Y-%m-%d_%H:%M:%S'') }}'
      nowtimefile: '{{ now().strftime(''%Y%m%d_%H%M%S'') }}'
      nowtimestamp: '{{ now().timestamp() }}'
  - action: pyscript.image_rotate
    metadata: {}
    data:
      input_image: /config/www/tmp/gas/gas_latest.jpg
      output_image: /config/www/tmp/gas/month/gas_{{nowtimefile}}.jpg
      rotation_angle: 0
  - action: notify.telegram_home
    data:
      title: 가스 검침 알림
      message: '검침시간: {{nowdate}}'
      data:
        photo:
        - url: https://ha.aaaa.cc/local/tmp/gas/gas_latest.jpg
          caption: '가스 검침일: {{nowdate}}

            가스 검침: {{states(''sensor.gas_meter_2'')}}

            월간 사용량: {{state_attr(''sensor.gas_meter_monthly'',''last_period'')}}'
    enabled: false
  mode: single
- id: '1755698295141'
  alias: 주변 밝기 자동 조명 제어
  description: 주변 밝기가 충분할 때 자동으로 조명을 끕니다.
  triggers:
  - type: illuminance
    device_id: e28ebb70ec49039d225e74b202fdd91e
    entity_id: 4ff6ecbace5417823e81b823fd5bd60e
    domain: sensor
    trigger: device
    below: 20
  conditions: []
  actions:
  - type: turn_off
    device_id: 16c454176737aa10fa53bf309f24d111
    entity_id: f88477c68d783968908c54499f788206
    domain: light
  mode: single
- id: '1755744715659'
  alias: 낮은 임계값 조명 알림
  description: 특정 센서 값이 임계값 미만으로 떨어질 때 조명을 켜서 시각적으로 알립니다.
  triggers:
  - type: value
    device_id: 42940cb04959837ed39a637fed0f69e2
    entity_id: 64ba2d64e316df06c349b58054dcab48
    domain: sensor
    trigger: device
    below: 2
  conditions: []
  actions:
  - type: turn_on
    device_id: 16c454176737aa10fa53bf309f24d111
    entity_id: f88477c68d783968908c54499f788206
    domain: light
    brightness_pct: 100
  mode: single
- id: '1757400245264'
  alias: 가스 검침 촬영 및 자동 판독
  description: ESP32-CAM 촬영부터 전처리와 AI OCR, 센서 업데이트까지 한 번에 수행합니다.
  triggers:
  - trigger: time
    at: 09:00:00
  conditions: []
  actions:
  - variables:
      year: '{{ now().strftime(''%Y'') }}'
      month: '{{ now().strftime(''%m'') }}'
      day: '{{ now().strftime(''%d'') }}'
      nowtime: '{{ now().strftime(''%Y-%m-%d_%H:%M:%S'') }}'
      nowtimefile: '{{ now().strftime(''%Y%m%d_%H%M%S'') }}'
      nowtimestamp: '{{ now().timestamp() }}'
  - metadata: {}
    data:
      rgb_color:
      - 255
      - 255
      - 255
      brightness_pct: 60
    target:
      entity_id: light.esp32_cam_esp32_cam_gas_light
    action: light.turn_on
    enabled: true
  - delay:
      hours: 0
      minutes: 0
      seconds: 6
      milliseconds: 0
  - metadata: {}
    data:
      filename: /config/www/tmp/gas/gas_latest.jpg
    action: camera.snapshot
    target:
      entity_id: camera.esp32_cam_esp32_cam_gas_cam
  - alias: OCR 준비(크롭/리사이즈/분할) – pyscript 단일 호출
    action: pyscript.gas_ocr_prepare
    data:
      input_image: /config/www/tmp/gas/gas_latest.jpg
      crop_output: /config/www/tmp/gas/gas_latest-crop.jpg
      resize_output: /config/www/tmp/gas/gas_latest-crop-resize.jpg
      int_output: /config/www/tmp/gas/gas_latest-crop-resize1.jpg
      frac_output: /config/www/tmp/gas/gas_latest-crop-resize2.jpg
      # 고대비 별도 출력은 사용하지 않음 (흑백/전처리 통합)
      crop_left: 420
      crop_top: 720
      crop_right: 1220
      crop_bottom: 880
      resize_width: 300
      # 전처리 파라미터(흑백 통합)
      to_grayscale: true
      denoise_median_size: 3
      auto_vertical: true
      vpad: 2
      hpad: 2
      split_int_left: 10
      split_int_right: 155
      split_top: 0
      split_bottom: 75
      split_frac_left: 156
      split_frac_right: 300
  - delay:
      hours: 0
      minutes: 0
      seconds: 2
      milliseconds: 0
  - metadata: {}
    data: {}
    target:
      entity_id: light.esp32_cam_esp32_cam_gas_light
    action: light.turn_off
    enabled: true
  - action: ai_task.generate_data
    data:
      attachments:
        media_content_id: media-source://media_source/local/tmp/gas/gas_latest-crop-resize1.jpg
        media_content_type: image/jpeg
      instructions: 3 digits only
      task_name: 가스 검침 정수 3자리
      entity_id: ai_task.google_ai_task
    response_variable: res1
  - action: ai_task.generate_data
    data:
      attachments:
        media_content_id: media-source://media_source/local/tmp/gas/gas_latest-crop-resize2.jpg
        media_content_type: image/jpeg
      instructions: 4 digits only
      task_name: 가스 검침 소수 4자리
      entity_id: ai_task.google_ai_task
    response_variable: res2
  # 고대비 보조 호출은 제거(흑백 전처리로 단일 파이프라인)
  - variables:
      c1_raw: '{{ res1.data | default("") | string | regex_findall("[0-9]") | join("")
        }}'
      c2_raw: '{{ (res1b.data if res1b is defined else "") | string | regex_findall("[0-9]")
        | join("") }}'
      c1_len: '{{ c1_raw | string | length }}'
      c2_len: '{{ c2_raw | string | length }}'
      c1_digits: '{{ (((c1_raw | string) ~ "000") | regex_findall("^\\d{3}") | first
        | default("")) }}'
      c2_digits: '{{ (((c2_raw | string) ~ "000") | regex_findall("^\\d{3}") | first
        | default("")) }}'
      c1: '{{ c1_digits | int(default=0) }}'
      c2: '{{ c2_digits | int(default=0) }}'
      f1_raw: '{{ res2.data | default("") | string | regex_findall("[0-9]") | join("")
        }}'
      f2_raw: '{{ (res2b.data if res2b is defined else "") | string | regex_findall("[0-9]")
        | join("") }}'
      f1_len: '{{ f1_raw | string | length }}'
      f2_len: '{{ f2_raw | string | length }}'
      primary_concat: '{{ (c1_raw | string) ~ (f1_raw | string) }}'
      primary_len: '{{ primary_concat | string | length }}'
      f1_pad: '{{ (primary_concat | regex_findall("^\\d{3}(\\d{4})") | first | default(""))
        if primary_len >= 7 else ((((f1_raw | string) ~ "0000") | regex_findall("^\\d{4}")
        | first | default(""))) }}'
      f2_pad: '{{ (((f2_raw | string) ~ "0000") | regex_findall("^\\d{4}") | first
        | default("")) }}'
      f1: '{{ f1_pad | int(default=0) }}'
      f2: '{{ f2_pad | int(default=0) }}'
      prev_val: '{{ states("sensor.gas_meter_2") | float(0) }}'
      prev_int: '{{ prev_val | int }}'
      prev_frac: '{{ ((prev_val - prev_int) * 10000) | round(0) | int }}'
      d1: '{{ (c1 - prev_int) | abs if c1_len > 0 else 9999 }}'
      d2: '{{ (c2 - prev_int) | abs if c2_len > 0 else 9999 }}'
      gas_value1: '{{ c1 if c1_len >= 3 else (c2 if c2_len >= 3 else (c1 if (c1_len
        > 0 and (c2_len == 0 or d1 <= d2)) else c2)) }}'
      fd1: '{{ (f1 - prev_frac) | abs if (primary_len >= 7 or f1_len >= 4) else 10000
        }}'
      fd2: '{{ (f2 - prev_frac) | abs if f2_len >= 4 else 10000 }}'
      fd1w: '{{ 10000 - fd1 if fd1 > 5000 else fd1 }}'
      fd2w: '{{ 10000 - fd2 if fd2 > 5000 else fd2 }}'
      gas_value2: '{{ f1 if ((primary_len >= 7 or f1_len >= 4) and (f2_len < 4 or
        fd1w <= fd2w)) else (f2 if f2_len >= 4 else f1) }}'
      gas_value2_padded: '{{ "%04d" | format(gas_value2|int) }}'
      gas_value: '{{ ((gas_value1 * 10000 + gas_value2) / 10000) | round(4) }}'
      current_value: '{{ states("sensor.gas_meter_2") | float(default=0) }}'
      delta: '{{ (gas_value | float - current_value) | round(4) }}'
      last_ts: '{{ as_timestamp(states.sensor.gas_meter_2.last_changed) }}'
      minutes_elapsed: '{{ ((as_timestamp(now()) - last_ts) / 60) | float(30) }}'
      max_delta: '{{ (0.15 * (minutes_elapsed / 30)) | round(3) }}'
      ocr1_success: '{{ c1_len >= 3 or c2_len >= 3 }}'
      ocr2_success: '{{ primary_len >= 7 or f1_len >= 4 or f2_len >= 4 }}'
  - action: input_text.set_value
    metadata: {}
    data:
      value: '{{ now().strftime(''%H:%M:%S'') }} |  정수: {{ c1_digits if c1_len >=
        3 else ''XXX'' }} |  소수: {{ f1_pad if f1_len >= 4 or primary_len >= 7 else
        ''XXXX'' }}'
    target:
      entity_id: input_text.gas_message_2
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ current_value | float(0) == 0 and ocr1_success and ocr2_success
          }}'
      sequence:
      - action: input_number.set_value
        data:
          value: '{{ gas_value | float }}'
        target:
          entity_id: input_number.gas_meter_2
      - action: homeassistant.update_entity
        target:
          entity_id:
          - sensor.gas_meter_2
          - sensor.gas_meter_monthly
      - action: persistent_notification.create
        data:
          title: ✅ 가스 검침 초기 설정
          message: "\U0001F550 시각: {{ now().strftime('%H:%M:%S') }}\n\U0001F522 초기값
            확정: {{ gas_value1 }}.{{ gas_value2_padded }}"
        enabled: true
  - if:
    - condition: template
      value_template: '{{ ocr1_success and ocr2_success }}'
    - condition: template
      value_template: '{{ 0 <= delta <= max_delta }}'
    - condition: template
      value_template: '{{ gas_value >= current_value }}'
    then:
    - action: input_number.set_value
      metadata: {}
      data:
        value: '{{ gas_value | float }}'
      target:
        entity_id: input_number.gas_meter_2
    - action: homeassistant.update_entity
      data: {}
      target:
        entity_id:
        - sensor.gas_meter_2
        - sensor.gas_meter_monthly
    - action: persistent_notification.create
      data:
        title: ✅ 가스 검침 성공
        message: "\U0001F550 시각: {{ now().strftime('%H:%M:%S') }}\n\U0001F4CA 검침값:
          {{ gas_value }} m³\n\U0001F4C8 증가량: +{{ delta }} m³ (허용 ≤ {{ max_delta }}
          m³)\n\U0001F522 확정: {{ gas_value1 }}.{{ gas_value2_padded }}\n후보(정수): {{
          c1 }}, {{ c2 }} | 후보(소수): {{ f1_pad }}, {{ f2_pad }}"
        notification_id: gas_ocr_success
    else:
    - action: persistent_notification.create
      data:
        title: ⚠️ 가스 검침 실패
        message: "\U0001F550 시각: {{ now().strftime('%H:%M:%S') }}\n❌ 검증 실패 사유: {%
          if not ocr1_success %}- OCR1 실패 (정수부){% endif %} {% if not ocr2_success
          %}- OCR2 실패 (소수부){% endif %} {% if delta < 0 %}- 음수 증가량 ({{ delta }} m³){%
          endif %} {% if delta > max_delta %}- 비정상적 증가 ({{ delta }} m³ > {{ max_delta
          }} m³){% endif %}\n\U0001F522 읽은 값: {{ gas_value }} m³ (현재: {{ current_value
          }} m³)\n후보(정수): {{ c1 }}, {{ c2 }} | 후보(소수): {{ f1_pad }}, {{ f2_pad }}"
        notification_id: gas_ocr_failed
  - metadata: {}
    data:
      input_image: /config/www/tmp/gas/gas_latest-crop.jpg
      output_image: /config/www/tmp/gas/{{year}}/{{month}}/{{day}}/gas_{{nowtimefile}}.jpg
      rotation_angle: 0
    alias: 날짜폴더로 복사
    enabled: false
    action: pyscript.image_rotate
  mode: single
- id: '1759067786798'
  alias: 이산화탄소 자동 환기 제어
  description: 실내 이산화탄소 농도가 높아지면 환기 시스템을 자동으로 켭니다.
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.ventilation_should_run
    to: 'on'
    from:
  conditions:
  - condition: device
    type: is_off
    device_id: 98bda3e8ced3d5a12ee685841e367c15
    entity_id: 99f72fc2d843060f243cb0f5979fe38d
    domain: switch
  actions:
  - type: turn_on
    device_id: 98bda3e8ced3d5a12ee685841e367c15
    entity_id: 99f72fc2d843060f243cb0f5979fe38d
    domain: switch
  - repeat:
      count: 12
      sequence:
      - type: toggle
        device_id: 98bda3e8ced3d5a12ee685841e367c15
        entity_id: 08a45393493c019ceb1c55783651f7e1
        domain: switch
      - delay:
          hours: 0
          minutes: 0
          seconds: 1
          milliseconds: 0
  mode: single
- id: '1759068039218'
  alias: 이산화탄소 자동 환기 하향
  description: 실내 이산화탄소 농도가 기준치 이하로 떨어지면 환기 시스템을 자동으로 끕니다.
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.ventilation_should_run
    from:
    to: 'off'
  conditions:
  - condition: device
    type: is_on
    device_id: 98bda3e8ced3d5a12ee685841e367c15
    entity_id: 99f72fc2d843060f243cb0f5979fe38d
    domain: switch
  actions:
  - type: turn_off
    device_id: 98bda3e8ced3d5a12ee685841e367c15
    entity_id: 99f72fc2d843060f243cb0f5979fe38d
    domain: switch
  mode: single
- id: '1759395712039'
  alias: 녹음본 저장 시 로컬 맥으로 복사
  description: ''
  triggers:
  - event_type: voice_recorder_saved
    trigger: event
  actions:
  - data:
      url: '{{ ''https://caredian.gleeze.com'' ~ (trigger.event.data.path | replace(''/config/www'',''/local''))
        }}'
      filename: '{{ trigger.event.data.filename }}'
    action: rest_command.push_record_to_mac
  mode: queued

- id: '1759500010000'
  alias: 가스 검침 단일 프롬프트 (Gemini 2.5 Pro)
  description: 하나의 크롭 이미지에서 프롬프트만으로 7자리(DDD.dddd) 판독
  triggers:
  - trigger: time
    at: '09:00:00'
  conditions: []
  actions:
  - metadata: {}
    data:
      rgb_color:
      - 255
      - 255
      - 255
      brightness_pct: 60
    target:
      entity_id: light.esp32_cam_esp32_cam_gas_light
    action: light.turn_on
  - delay:
      hours: 0
      minutes: 0
      seconds: 6
      milliseconds: 0
  - metadata: {}
    data:
      filename: /config/www/tmp/gas/gas_latest.jpg
    action: camera.snapshot
    target:
      entity_id: camera.esp32_cam_esp32_cam_gas_cam
  - alias: 크롭만 수행(리사이즈 미사용)
    action: pyscript.gas_ocr_prepare
    data:
      input_image: /config/www/tmp/gas/gas_latest.jpg
      crop_output: /config/www/tmp/gas/gas_latest-crop.jpg
      resize_output: /config/www/tmp/gas/gas_latest-crop-resize.jpg
      int_output: /config/www/tmp/gas/gas_latest-crop-resize1.jpg
      frac_output: /config/www/tmp/gas/gas_latest-crop-resize2.jpg
      crop_left: 420
      crop_top: 720
      crop_right: 1220
      crop_bottom: 880
      resize_width: 0
      to_grayscale: true
      denoise_median_size: 3
      auto_vertical: true
      vpad: 2
      hpad: 2
  - metadata: {}
    data: {}
    target:
      entity_id: light.esp32_cam_esp32_cam_gas_light
    action: light.turn_off
  - action: ai_task.generate_data
    response_variable: res
    data:
      entity_id: ai_task.google_ai_task
      task_name: 가스 검침 단일 프롬프트
      instructions: >-
        이 이미지는 기계식 가스 계량기의 7자리 숫자 표시부입니다. 3자리 정수부와 4자리 소수부를 읽고,
        숫자만으로 DDD.dddd 형식으로 반환하세요. 공백·단위·설명·줄바꿈 없이 결과만 출력하세요.
      attachments:
        media_content_id: media-source://media_source/local/tmp/gas/gas_latest-crop.jpg
        media_content_type: image/jpeg
  - variables:
      res_text: "{{ res.data | default('') | string }}"
      normalized: >-
        {{
          (res_text | regex_findall('\\d{3}\\.\\d{4}') | first | default(''))
          if (res_text | regex_search('\\d{3}\\.\\d{4}'))
          else (
            ((res_text | regex_findall('\\d') | join(''))[:3]
             ~ '.' ~ (res_text | regex_findall('\\d') | join(''))[3:7])
            if ((res_text | regex_findall('\\d') | length) >= 7) else ''
          )
        }}
      int_str: "{{ normalized | regex_findall('^(\\d{3})') | first | default('') }}"
      frac_str: "{{ normalized | regex_findall('(?<=\\.)\\d{4}$') | first | default('') }}"
      ok_fmt: "{{ int_str|length == 3 and frac_str|length == 4 }}"
      gas_value: "{{ ((int_str | int(0)) * 10000 + (frac_str | int(0))) / 10000 if ok_fmt else (states('sensor.gas_meter_2') | float(0)) }}"
      current_value: "{{ states('sensor.gas_meter_2') | float(0) }}"
      delta: "{{ (gas_value - current_value) | round(4) }}"
      last_ts: "{{ as_timestamp(states.sensor.gas_meter_2.last_changed) }}"
      minutes_elapsed: "{{ ((as_timestamp(now()) - last_ts) / 60) | float(30)) }}"
      max_delta: "{{ (0.15 * (minutes_elapsed / 30)) | round(3) }}"
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ ok_fmt }}"
      - condition: template
        value_template: "{{ 0 <= delta <= max_delta }}"
      - condition: template
        value_template: "{{ gas_value >= current_value }}"
      sequence:
      - action: input_number.set_value
        metadata: {}
        data:
          value: "{{ gas_value | float }}"
        target:
          entity_id: input_number.gas_meter_2
      - action: homeassistant.update_entity
        data: {}
        target:
          entity_id:
          - sensor.gas_meter_2
          - sensor.gas_meter_monthly
      - action: persistent_notification.create
        data:
          title: "✅ 가스 검침(단일 프롬프트) 성공"
          message: "{{ now().strftime('%H:%M:%S') }} | 결과: {{ normalized }} ({{ gas_value }} m³)\n증가량: +{{ delta }} m³ (허용 ≤ {{ max_delta }} m³)"
    - conditions: []
      sequence:
      - action: persistent_notification.create
        data:
          title: "⚠️ 가스 검침(단일 프롬프트) 실패"
          message: "{{ now().strftime('%H:%M:%S') }} | 응답: \"{{ res_text }}\"\n정규화 실패 또는 검증 미통과(Δ={{ delta }} m³, 허용 ≤ {{ max_delta }} m³)"
  mode: single
